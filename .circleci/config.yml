version: 2
jobs:
  build:
    working_directory: ~/repo
    parallelism: 3
    docker:
      - image: circleci/ruby:2.5.1-node-browsers
        environment:
          PGHOST: 127.0.0.1
          PGUSER: myapp-user
          MYAPP_DATABASE_HOST_PATH: localhost
          MYAPP_DATABASE_USERNAME: myapp-user
          RAILS_ENV: test
      - image: circleci/postgres:9.6-alpine
        environment:
          POSTGRES_USER: myapp-user
          POSTGRES_DB: myapp_test
          POSTGRES_PASSWORD: ""
    steps:
      - checkout

      - run:
          name: Which bundler?
          command: bundle -v

      - restore_cache:
          keys:
            - rails-myapp-bundle-v2-{{ checksum "Gemfile.lock" }}
            - rails-myapp-bundle-v2-

      - run:
          name: Bundle Install
          command: bundle check || bundle install --jobs=3 --retry=3 --path vendor/bundle

      - save_cache:
          key: rails-myapp-bundle-v2-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      - restore_cache:
          keys:
            - rails-myapp-yarn-{{ checksum "yarn.lock" }}
            - rails-myapp-yarn-

      - run:
          name: Yarn Install
          command: yarn install --cache-folder ~/.cache/yarn

      - save_cache:
          key: rails-myapp-yarn-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn

      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: Database setup
          command: bin/rails db:schema:load --trace

      - run:
          name: Run rspec in parallel
          command: |
            bundle exec rspec --profile 10 \
                              --format RspecJunitFormatter \
                              --out /tmp/test_results/rspec.xml \
                              --format progress \
                              $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)

      - store_test_results:
          path: /tmp/test-results

      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

  deploy:
    steps:
      - checkout
      - run:
          name: Deploy Master to Heroku
          command: |
            git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP.git master

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master
